#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorldSportsA.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="minidb")]
	public partial class CoreDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertGallery(Gallery instance);
    partial void UpdateGallery(Gallery instance);
    partial void DeleteGallery(Gallery instance);
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertVenue(Venue instance);
    partial void UpdateVenue(Venue instance);
    partial void DeleteVenue(Venue instance);
    partial void InsertMatchSummary(MatchSummary instance);
    partial void UpdateMatchSummary(MatchSummary instance);
    partial void DeleteMatchSummary(MatchSummary instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertFixture(Fixture instance);
    partial void UpdateFixture(Fixture instance);
    partial void DeleteFixture(Fixture instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    #endregion
		
		public CoreDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["minidbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CoreDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoreDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoreDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoreDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Gallery> Galleries
		{
			get
			{
				return this.GetTable<Gallery>();
			}
		}
		
		public System.Data.Linq.Table<Match> Matches
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Venue> Venues
		{
			get
			{
				return this.GetTable<Venue>();
			}
		}
		
		public System.Data.Linq.Table<MatchSummary> MatchSummaries
		{
			get
			{
				return this.GetTable<MatchSummary>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<Fixture> Fixtures
		{
			get
			{
				return this.GetTable<Fixture>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Gallery")]
	public partial class Gallery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Caption;
		
		private string _Picture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnPictureUrlChanging(string value);
    partial void OnPictureUrlChanged();
    #endregion
		
		public Gallery()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Caption", DbType="NVarChar(50)")]
		public string Caption
		{
			get
			{
				return this._Caption;
			}
			set
			{
				if ((this._Caption != value))
				{
					this.OnCaptionChanging(value);
					this.SendPropertyChanging();
					this._Caption = value;
					this.SendPropertyChanged("Caption");
					this.OnCaptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PictureUrl
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureUrlChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("PictureUrl");
					this.OnPictureUrlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Matches")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _HomeTeamGoals;
		
		private System.Nullable<int> _AwayTeamGoals;
		
		private int _HScorerId;
		
		private int _AScorerId;
		
		private string _Comment;
		
		private int _FixtureId;
		
		private EntitySet<MatchSummary> _MatchSummaries;
		
		private EntitySet<Report> _Reports;
		
		private EntityRef<Fixture> _Fixture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHomeTeamGoalsChanging(System.Nullable<int> value);
    partial void OnHomeTeamGoalsChanged();
    partial void OnAwayTeamGoalsChanging(System.Nullable<int> value);
    partial void OnAwayTeamGoalsChanged();
    partial void OnHScorerIdChanging(int value);
    partial void OnHScorerIdChanged();
    partial void OnAScorerIdChanging(int value);
    partial void OnAScorerIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnFixtureIdChanging(int value);
    partial void OnFixtureIdChanged();
    #endregion
		
		public Match()
		{
			this._MatchSummaries = new EntitySet<MatchSummary>(new Action<MatchSummary>(this.attach_MatchSummaries), new Action<MatchSummary>(this.detach_MatchSummaries));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._Fixture = default(EntityRef<Fixture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeTeamGoals", DbType="Int")]
		public System.Nullable<int> HomeTeamGoals
		{
			get
			{
				return this._HomeTeamGoals;
			}
			set
			{
				if ((this._HomeTeamGoals != value))
				{
					this.OnHomeTeamGoalsChanging(value);
					this.SendPropertyChanging();
					this._HomeTeamGoals = value;
					this.SendPropertyChanged("HomeTeamGoals");
					this.OnHomeTeamGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayTeamGoals", DbType="Int")]
		public System.Nullable<int> AwayTeamGoals
		{
			get
			{
				return this._AwayTeamGoals;
			}
			set
			{
				if ((this._AwayTeamGoals != value))
				{
					this.OnAwayTeamGoalsChanging(value);
					this.SendPropertyChanging();
					this._AwayTeamGoals = value;
					this.SendPropertyChanged("AwayTeamGoals");
					this.OnAwayTeamGoalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HScorerId", DbType="Int NOT NULL")]
		public int HScorerId
		{
			get
			{
				return this._HScorerId;
			}
			set
			{
				if ((this._HScorerId != value))
				{
					this.OnHScorerIdChanging(value);
					this.SendPropertyChanging();
					this._HScorerId = value;
					this.SendPropertyChanged("HScorerId");
					this.OnHScorerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AScorerId", DbType="Int NOT NULL")]
		public int AScorerId
		{
			get
			{
				return this._AScorerId;
			}
			set
			{
				if ((this._AScorerId != value))
				{
					this.OnAScorerIdChanging(value);
					this.SendPropertyChanging();
					this._AScorerId = value;
					this.SendPropertyChanged("AScorerId");
					this.OnAScorerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixtureId", DbType="Int NOT NULL")]
		public int FixtureId
		{
			get
			{
				return this._FixtureId;
			}
			set
			{
				if ((this._FixtureId != value))
				{
					if (this._Fixture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFixtureIdChanging(value);
					this.SendPropertyChanging();
					this._FixtureId = value;
					this.SendPropertyChanged("FixtureId");
					this.OnFixtureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchSummary", Storage="_MatchSummaries", ThisKey="Id", OtherKey="MatchId")]
		public EntitySet<MatchSummary> MatchSummaries
		{
			get
			{
				return this._MatchSummaries;
			}
			set
			{
				this._MatchSummaries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Report", Storage="_Reports", ThisKey="Id", OtherKey="MatchId")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fixture_Match", Storage="_Fixture", ThisKey="FixtureId", OtherKey="Id", IsForeignKey=true)]
		public Fixture Fixture
		{
			get
			{
				return this._Fixture.Entity;
			}
			set
			{
				Fixture previousValue = this._Fixture.Entity;
				if (((previousValue != value) 
							|| (this._Fixture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fixture.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Fixture.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._FixtureId = value.Id;
					}
					else
					{
						this._FixtureId = default(int);
					}
					this.SendPropertyChanged("Fixture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchSummaries(MatchSummary entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_MatchSummaries(MatchSummary entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Headline;
		
		private string _Pictures;
		
		private string _Content;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHeadlineChanging(string value);
    partial void OnHeadlineChanged();
    partial void OnPictureUrlChanging(string value);
    partial void OnPictureUrlChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public New()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Headline", DbType="NVarChar(50)")]
		public string Headline
		{
			get
			{
				return this._Headline;
			}
			set
			{
				if ((this._Headline != value))
				{
					this.OnHeadlineChanging(value);
					this.SendPropertyChanging();
					this._Headline = value;
					this.SendPropertyChanged("Headline");
					this.OnHeadlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pictures", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PictureUrl
		{
			get
			{
				return this._Pictures;
			}
			set
			{
				if ((this._Pictures != value))
				{
					this.OnPictureUrlChanging(value);
					this.SendPropertyChanging();
					this._Pictures = value;
					this.SendPropertyChanged("PictureUrl");
					this.OnPictureUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstNames;
		
		private string _LastName;
		
		private string _DOB;
		
		private System.Nullable<int> _JerseyNo;
		
		private string _Position;
		
		private int _TeamId;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNamesChanging(string value);
    partial void OnFirstNamesChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDOBChanging(string value);
    partial void OnDOBChanged();
    partial void OnJerseyNoChanging(System.Nullable<int> value);
    partial void OnJerseyNoChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnTeamIdChanging(int value);
    partial void OnTeamIdChanged();
    #endregion
		
		public Player()
		{
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstNames", DbType="NVarChar(50)")]
		public string FirstNames
		{
			get
			{
				return this._FirstNames;
			}
			set
			{
				if ((this._FirstNames != value))
				{
					this.OnFirstNamesChanging(value);
					this.SendPropertyChanging();
					this._FirstNames = value;
					this.SendPropertyChanged("FirstNames");
					this.OnFirstNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="NVarChar(50)")]
		public string DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JerseyNo", DbType="Int")]
		public System.Nullable<int> JerseyNo
		{
			get
			{
				return this._JerseyNo;
			}
			set
			{
				if ((this._JerseyNo != value))
				{
					this.OnJerseyNoChanging(value);
					this.SendPropertyChanging();
					this._JerseyNo = value;
					this.SendPropertyChanged("JerseyNo");
					this.OnJerseyNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(50)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamId", DbType="Int NOT NULL")]
		public int TeamId
		{
			get
			{
				return this._TeamId;
			}
			set
			{
				if ((this._TeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIdChanging(value);
					this.SendPropertyChanging();
					this._TeamId = value;
					this.SendPropertyChanged("TeamId");
					this.OnTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Team", ThisKey="TeamId", OtherKey="Id", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._TeamId = value.Id;
					}
					else
					{
						this._TeamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _Username;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Venues")]
	public partial class Venue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Capacity;
		
		private string _Address;
		
		private EntitySet<Fixture> _Fixtures;
		
		private EntitySet<Team> _Teams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Venue()
		{
			this._Fixtures = new EntitySet<Fixture>(new Action<Fixture>(this.attach_Fixtures), new Action<Fixture>(this.detach_Fixtures));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Venue_Fixture", Storage="_Fixtures", ThisKey="Id", OtherKey="VenueId")]
		public EntitySet<Fixture> Fixtures
		{
			get
			{
				return this._Fixtures;
			}
			set
			{
				this._Fixtures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Venue_Team", Storage="_Teams", ThisKey="Id", OtherKey="VenueId")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fixtures(Fixture entity)
		{
			this.SendPropertyChanging();
			entity.Venue = this;
		}
		
		private void detach_Fixtures(Fixture entity)
		{
			this.SendPropertyChanging();
			entity.Venue = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Venue = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.Venue = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MatchSummaries")]
	public partial class MatchSummary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _YellowCardsH;
		
		private System.Nullable<int> _RedCardsH;
		
		private System.Nullable<int> _YellowCardsA;
		
		private System.Nullable<int> _PassesH;
		
		private System.Nullable<int> _PassesA;
		
		private System.Nullable<int> _Fouls;
		
		private System.Nullable<int> _Offsides;
		
		private System.Nullable<int> _Possesion;
		
		private int _GoalsH;
		
		private int _GoalsA;
		
		private int _MatchId;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnYellowCardsHChanging(System.Nullable<int> value);
    partial void OnYellowCardsHChanged();
    partial void OnRedCardsHChanging(System.Nullable<int> value);
    partial void OnRedCardsHChanged();
    partial void OnYellowCardsAChanging(System.Nullable<int> value);
    partial void OnYellowCardsAChanged();
    partial void OnPassesHChanging(System.Nullable<int> value);
    partial void OnPassesHChanged();
    partial void OnPassesAChanging(System.Nullable<int> value);
    partial void OnPassesAChanged();
    partial void OnFoulsChanging(System.Nullable<int> value);
    partial void OnFoulsChanged();
    partial void OnOffsidesChanging(System.Nullable<int> value);
    partial void OnOffsidesChanged();
    partial void OnPossesionChanging(System.Nullable<int> value);
    partial void OnPossesionChanged();
    partial void OnGoalsHChanging(int value);
    partial void OnGoalsHChanged();
    partial void OnGoalsAChanging(int value);
    partial void OnGoalsAChanged();
    partial void OnMatchIdChanging(int value);
    partial void OnMatchIdChanged();
    #endregion
		
		public MatchSummary()
		{
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YellowCardsH", DbType="Int")]
		public System.Nullable<int> YellowCardsH
		{
			get
			{
				return this._YellowCardsH;
			}
			set
			{
				if ((this._YellowCardsH != value))
				{
					this.OnYellowCardsHChanging(value);
					this.SendPropertyChanging();
					this._YellowCardsH = value;
					this.SendPropertyChanged("YellowCardsH");
					this.OnYellowCardsHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RedCardsH", DbType="Int")]
		public System.Nullable<int> RedCardsH
		{
			get
			{
				return this._RedCardsH;
			}
			set
			{
				if ((this._RedCardsH != value))
				{
					this.OnRedCardsHChanging(value);
					this.SendPropertyChanging();
					this._RedCardsH = value;
					this.SendPropertyChanged("RedCardsH");
					this.OnRedCardsHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YellowCardsA", DbType="Int")]
		public System.Nullable<int> YellowCardsA
		{
			get
			{
				return this._YellowCardsA;
			}
			set
			{
				if ((this._YellowCardsA != value))
				{
					this.OnYellowCardsAChanging(value);
					this.SendPropertyChanging();
					this._YellowCardsA = value;
					this.SendPropertyChanged("YellowCardsA");
					this.OnYellowCardsAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassesH", DbType="Int")]
		public System.Nullable<int> PassesH
		{
			get
			{
				return this._PassesH;
			}
			set
			{
				if ((this._PassesH != value))
				{
					this.OnPassesHChanging(value);
					this.SendPropertyChanging();
					this._PassesH = value;
					this.SendPropertyChanged("PassesH");
					this.OnPassesHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassesA", DbType="Int")]
		public System.Nullable<int> PassesA
		{
			get
			{
				return this._PassesA;
			}
			set
			{
				if ((this._PassesA != value))
				{
					this.OnPassesAChanging(value);
					this.SendPropertyChanging();
					this._PassesA = value;
					this.SendPropertyChanged("PassesA");
					this.OnPassesAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fouls", DbType="Int")]
		public System.Nullable<int> Fouls
		{
			get
			{
				return this._Fouls;
			}
			set
			{
				if ((this._Fouls != value))
				{
					this.OnFoulsChanging(value);
					this.SendPropertyChanging();
					this._Fouls = value;
					this.SendPropertyChanged("Fouls");
					this.OnFoulsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offsides", DbType="Int")]
		public System.Nullable<int> Offsides
		{
			get
			{
				return this._Offsides;
			}
			set
			{
				if ((this._Offsides != value))
				{
					this.OnOffsidesChanging(value);
					this.SendPropertyChanging();
					this._Offsides = value;
					this.SendPropertyChanged("Offsides");
					this.OnOffsidesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Possesion", DbType="Int")]
		public System.Nullable<int> Possesion
		{
			get
			{
				return this._Possesion;
			}
			set
			{
				if ((this._Possesion != value))
				{
					this.OnPossesionChanging(value);
					this.SendPropertyChanging();
					this._Possesion = value;
					this.SendPropertyChanged("Possesion");
					this.OnPossesionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoalsH", DbType="Int NOT NULL")]
		public int GoalsH
		{
			get
			{
				return this._GoalsH;
			}
			set
			{
				if ((this._GoalsH != value))
				{
					this.OnGoalsHChanging(value);
					this.SendPropertyChanging();
					this._GoalsH = value;
					this.SendPropertyChanged("GoalsH");
					this.OnGoalsHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoalsA", DbType="Int NOT NULL")]
		public int GoalsA
		{
			get
			{
				return this._GoalsA;
			}
			set
			{
				if ((this._GoalsA != value))
				{
					this.OnGoalsAChanging(value);
					this.SendPropertyChanging();
					this._GoalsA = value;
					this.SendPropertyChanged("GoalsA");
					this.OnGoalsAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="Int NOT NULL")]
		public int MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchSummary", Storage="_Match", ThisKey="MatchId", OtherKey="Id", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.MatchSummaries.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.MatchSummaries.Add(this);
						this._MatchId = value.Id;
					}
					else
					{
						this._MatchId = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Report")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Comment;
		
		private string _Picture;
		
		private int _MatchId;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnPictureUrlChanging(string value);
    partial void OnPictureUrlChanged();
    partial void OnMatchIdChanging(int value);
    partial void OnMatchIdChanged();
    #endregion
		
		public Report()
		{
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string PictureUrl
		{
			get
			{
				return this._Picture;
			}
			set
			{
				if ((this._Picture != value))
				{
					this.OnPictureUrlChanging(value);
					this.SendPropertyChanging();
					this._Picture = value;
					this.SendPropertyChanged("PictureUrl");
					this.OnPictureUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="Int NOT NULL")]
		public int MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_Report", Storage="_Match", ThisKey="MatchId", OtherKey="Id", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._MatchId = value.Id;
					}
					else
					{
						this._MatchId = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fixtures")]
	public partial class Fixture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _VenueId;
		
		private System.Nullable<System.DateTime> _TimeStamp;
		
		private string _Notes;
		
		private int _HomeTeamId;
		
		private int _AwayTeamId;
		
		private EntitySet<Match> _Matches;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Team> _Team1;
		
		private EntityRef<Venue> _Venue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnVenueIdChanging(int value);
    partial void OnVenueIdChanged();
    partial void OnTimeStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeStampChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnHomeTeamIdChanging(int value);
    partial void OnHomeTeamIdChanged();
    partial void OnAwayTeamIdChanging(int value);
    partial void OnAwayTeamIdChanged();
    #endregion
		
		public Fixture()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Team = default(EntityRef<Team>);
			this._Team1 = default(EntityRef<Team>);
			this._Venue = default(EntityRef<Venue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueId", DbType="Int NOT NULL")]
		public int VenueId
		{
			get
			{
				return this._VenueId;
			}
			set
			{
				if ((this._VenueId != value))
				{
					if (this._Venue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVenueIdChanging(value);
					this.SendPropertyChanging();
					this._VenueId = value;
					this.SendPropertyChanged("VenueId");
					this.OnVenueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeTeamId", DbType="Int NOT NULL")]
		public int HomeTeamId
		{
			get
			{
				return this._HomeTeamId;
			}
			set
			{
				if ((this._HomeTeamId != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeTeamIdChanging(value);
					this.SendPropertyChanging();
					this._HomeTeamId = value;
					this.SendPropertyChanged("HomeTeamId");
					this.OnHomeTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayTeamId", DbType="Int NOT NULL")]
		public int AwayTeamId
		{
			get
			{
				return this._AwayTeamId;
			}
			set
			{
				if ((this._AwayTeamId != value))
				{
					if (this._Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwayTeamIdChanging(value);
					this.SendPropertyChanging();
					this._AwayTeamId = value;
					this.SendPropertyChanged("AwayTeamId");
					this.OnAwayTeamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fixture_Match", Storage="_Matches", ThisKey="Id", OtherKey="FixtureId")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Fixture", Storage="_Team", ThisKey="HomeTeamId", OtherKey="Id", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Fixtures.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Fixtures.Add(this);
						this._HomeTeamId = value.Id;
					}
					else
					{
						this._HomeTeamId = default(int);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Fixture1", Storage="_Team1", ThisKey="AwayTeamId", OtherKey="Id", IsForeignKey=true)]
		public Team Team1
		{
			get
			{
				return this._Team1.Entity;
			}
			set
			{
				Team previousValue = this._Team1.Entity;
				if (((previousValue != value) 
							|| (this._Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team1.Entity = null;
						previousValue.Fixtures1.Remove(this);
					}
					this._Team1.Entity = value;
					if ((value != null))
					{
						value.Fixtures1.Add(this);
						this._AwayTeamId = value.Id;
					}
					else
					{
						this._AwayTeamId = default(int);
					}
					this.SendPropertyChanged("Team1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Venue_Fixture", Storage="_Venue", ThisKey="VenueId", OtherKey="Id", IsForeignKey=true)]
		public Venue Venue
		{
			get
			{
				return this._Venue.Entity;
			}
			set
			{
				Venue previousValue = this._Venue.Entity;
				if (((previousValue != value) 
							|| (this._Venue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Venue.Entity = null;
						previousValue.Fixtures.Remove(this);
					}
					this._Venue.Entity = value;
					if ((value != null))
					{
						value.Fixtures.Add(this);
						this._VenueId = value.Id;
					}
					else
					{
						this._VenueId = default(int);
					}
					this.SendPropertyChanged("Venue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Fixture = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Fixture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _VenueId;
		
		private string _Coach;
		
		private string _Administrator;
		
		private string _LogoUrl;
		
		private EntitySet<Player> _Players;
		
		private EntitySet<Fixture> _Fixtures;
		
		private EntitySet<Fixture> _Fixtures1;
		
		private EntityRef<Venue> _Venue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVenueIdChanging(int value);
    partial void OnVenueIdChanged();
    partial void OnCoachChanging(string value);
    partial void OnCoachChanged();
    partial void OnAdministratorChanging(string value);
    partial void OnAdministratorChanged();
    partial void OnLogoUrlChanging(string value);
    partial void OnLogoUrlChanged();
    #endregion
		
		public Team()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._Fixtures = new EntitySet<Fixture>(new Action<Fixture>(this.attach_Fixtures), new Action<Fixture>(this.detach_Fixtures));
			this._Fixtures1 = new EntitySet<Fixture>(new Action<Fixture>(this.attach_Fixtures1), new Action<Fixture>(this.detach_Fixtures1));
			this._Venue = default(EntityRef<Venue>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VenueId", DbType="Int NOT NULL")]
		public int VenueId
		{
			get
			{
				return this._VenueId;
			}
			set
			{
				if ((this._VenueId != value))
				{
					if (this._Venue.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVenueIdChanging(value);
					this.SendPropertyChanging();
					this._VenueId = value;
					this.SendPropertyChanged("VenueId");
					this.OnVenueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coach", DbType="NVarChar(50)")]
		public string Coach
		{
			get
			{
				return this._Coach;
			}
			set
			{
				if ((this._Coach != value))
				{
					this.OnCoachChanging(value);
					this.SendPropertyChanging();
					this._Coach = value;
					this.SendPropertyChanged("Coach");
					this.OnCoachChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Administrator", DbType="NVarChar(50)")]
		public string Administrator
		{
			get
			{
				return this._Administrator;
			}
			set
			{
				if ((this._Administrator != value))
				{
					this.OnAdministratorChanging(value);
					this.SendPropertyChanging();
					this._Administrator = value;
					this.SendPropertyChanged("Administrator");
					this.OnAdministratorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoUrl", DbType="NVarChar(MAX)")]
		public string LogoUrl
		{
			get
			{
				return this._LogoUrl;
			}
			set
			{
				if ((this._LogoUrl != value))
				{
					this.OnLogoUrlChanging(value);
					this.SendPropertyChanging();
					this._LogoUrl = value;
					this.SendPropertyChanged("LogoUrl");
					this.OnLogoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Players", ThisKey="Id", OtherKey="TeamId")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Fixture", Storage="_Fixtures", ThisKey="Id", OtherKey="HomeTeamId")]
		public EntitySet<Fixture> Fixtures
		{
			get
			{
				return this._Fixtures;
			}
			set
			{
				this._Fixtures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Fixture1", Storage="_Fixtures1", ThisKey="Id", OtherKey="AwayTeamId")]
		public EntitySet<Fixture> Fixtures1
		{
			get
			{
				return this._Fixtures1;
			}
			set
			{
				this._Fixtures1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Venue_Team", Storage="_Venue", ThisKey="VenueId", OtherKey="Id", IsForeignKey=true)]
		public Venue Venue
		{
			get
			{
				return this._Venue.Entity;
			}
			set
			{
				Venue previousValue = this._Venue.Entity;
				if (((previousValue != value) 
							|| (this._Venue.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Venue.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._Venue.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._VenueId = value.Id;
					}
					else
					{
						this._VenueId = default(int);
					}
					this.SendPropertyChanged("Venue");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Fixtures(Fixture entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Fixtures(Fixture entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_Fixtures1(Fixture entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = this;
		}
		
		private void detach_Fixtures1(Fixture entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = null;
		}
	}
}
#pragma warning restore 1591
